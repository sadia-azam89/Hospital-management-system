
#include "stdafx.h"
#include<iostream>
using namespace std;
class Patient
{
private:
	struct patient_node
	{
		int id;
char name[30];
int age;
char gender[30];
char phone_no[30];
char disease[30];
char medicine[30];
char address[30];
int room_no;
int ward_no;
patient_node *next;
patient_node *prev;

	};
	
public:
	struct patient_node *head, *tail;

Patient()
{head=NULL;
tail=NULL;
}
bool emptyList()
{if(head==NULL  )
{return true; 
}
else
return false;
}

void insert_end_pateint(int i,char Nam[30] ,int a,char g[30],char phone[30],char dis[30],char med[30],char add[30],int r ,int w )
{patient_node *temp;
temp=new patient_node;
strcpy(temp->name,Nam);
temp->id=i;
temp->age=a;
strcpy(temp->gender,g);
strcpy(temp->phone_no,phone);
strcpy(temp->disease,dis);
strcpy(temp->medicine,med);
strcpy(temp->address,add);
temp->room_no= r;
temp->ward_no=w;
patient_node *ptr;
ptr=head;
if(emptyList())
{tail=head=temp;
}
else
{
tail->next=temp;
temp->prev=tail;
tail=temp;
temp->next=head;
head->prev=temp;
}
}
void delete_record()
{int i;
cout<<"ENTER THE NODE YOU WANT TO DELETE ";
cin>>i;
patient_node *s1;
patient_node*s2;
s1=NULL;
s2=head;
while(s2->next!=head && s2->id!=i)
 {s1=s2;
s2=s2->next;
}
if(s2->id!=i)
{cout<<endl;
cout<<"THIS VALUE DONOT EXIST "<<endl;
cout<<endl;
cout<<"SO THE LIST WILL BE "<<endl;
}
else if(s2==head)
{
s1=head->prev;
head=head->next;
tail->next=s2->next;
s1->next=head;
s2->next=NULL;
s2->prev=NULL;
delete s2;
}
else if(s2->next==head)
{s1->next =head;
head->prev=s1;
s2->prev=NULL;
s2->next=NULL;
delete s2;
}
else
{
s1->next=s2->next;
s2->next->prev=s1;
s2->prev=NULL;
s2->next=NULL;
delete s2;}
}
void insert()
{int n,i,a,r , w;
char Nam[30], g[30], phone[30], dis[30],med[30], add[30];
patient_node *temp;
temp=new patient_node;
cout<<"ENTER THE ID YOU WANT TO INSERT"<<endl;
cin>>i;
temp->id=i;
cout<<"ENTER THE NAME OF THE PATIENT YOU WANT TO INSERT"<<endl;
cin>>Nam;
strcpy(temp->name,Nam);
cout<<"ENTER THE AGE OF THE PATIENT YOU WANT TO INSERT"<<endl;
cin>>a;
temp->age=a;
cout<<"ENTER THE GENDER OF THE PATIENT YOU WANT TO INSERT"<<endl;
cin>>g;
strcpy(temp->gender,g);
cout<<"ENTER THE PHONE OF THE PATIENT YOU WANT TO INSERT"<<endl;
cin>> phone;
strcpy(temp->phone_no,phone);
cout<<"ENTER THE DIEASES OF THE PATIENT YOU WANT TO INSERT"<<endl;
cin>>dis;
strcpy(temp->disease,dis);
cout<<"ENTER THE ADDRESS OF THE PATIENT YOU WANT TO INSERT"<<endl;
cin>>add;
strcpy(temp->address,add);
cout<<"ENTER THE MEDICINE OF THE PATIENT YOU WANT TO INSERT"<<endl;
cin>>med;
strcpy(temp->medicine,med);
cout<<"ENTER THE ROOM OF THE PATIENT YOU WANT TO INSERT"<<endl;
cin>>r;
temp->room_no= r;
cout<<"ENTER THE WARD OF THE PATIENT YOU WANT TO INSERT"<<endl;
cin>>w;
temp->ward_no=w;
int done=0;
if(head==NULL)
		{
		head=temp;
		temp->id=i;
		temp->next=NULL;
		done=1;
		}
else if(head->id>=i)
		{temp->id=i;
			temp->next=head;
			temp->next=tail->next;
            temp->prev=tail;
			tail->next->prev=temp;
			tail->next=temp;
			head=temp;

			done=1;
		}
else
		{if(tail->id<i)
{temp->id=i;
			tail->next=temp;
			temp->prev=tail;
			tail=temp;
			temp->next=head;
			head->prev=temp;

			done=1;
}
			}
		
		if(done==0)
		{temp->id=i;
			
patient_node *s1;
 patient_node *s2;
 s1=head;
 s2=s1->next;
 while(s2!=head)
 {if(s1->id<i && s2->id>i)
 {temp->next=s2;
 s1->next=temp;
 temp->prev=s1;
 s2->prev=temp;
 done=1;
 break;
 }
 s1=s1->next;
 s2=s2->next;}


			
		}

}
void traverse_pateint()
{patient_node *ptr;
ptr=head;
if(!emptyList())
{cout<<"INFORMATION ABOUT THE PATEINT IS "<<endl;;
do
{
cout<<"NAME: "<<ptr->name<<endl;
cout<<"ID: "<<ptr->id<<endl;
cout<<"AGE: "<<ptr->age<<endl;
cout<<"GENDER: "<<ptr->gender<<endl;
cout<<"PHONE NUMBER: "<<ptr->phone_no<<endl;
cout<<"DISEASE: "<<ptr->disease<<endl;
cout<<"MEDICINE: "<<ptr->medicine<<endl;
cout<<"ADDRESS: "<<ptr->address<<endl;
cout<<"ROOM NUMBER: "<<ptr->room_no<<endl;
cout<<"WARD NUMBER: "<<ptr->ward_no<<endl;
cout<<endl;
ptr=ptr->next;
}
while(ptr!=head);
}
}
void search()
{int i;
cout<<"ENTER THE ID OF THE PATIENT WHOM YOU WANT TO SEARCH"<<endl;
cin>>i;
patient_node *ptr;
ptr=head;
if(!emptyList())
{do
{
if(ptr->id==i)
{cout<<"NAME: "<<ptr->name<<endl;
cout<<"ID: "<<ptr->id<<endl;
cout<<"AGE: "<<ptr->age<<endl;
cout<<"GENDER: "<<ptr->gender<<endl;
cout<<"PHONE NUMBER: "<<ptr->phone_no<<endl;
cout<<"DISEASE: "<<ptr->disease<<endl;
cout<<"MEDICINE: "<<ptr->medicine<<endl;
cout<<"ADDRESS: "<<ptr->address<<endl;
cout<<"ROOM NUMBER: "<<ptr->room_no<<endl;
cout<<"WARD NUMBER: "<<ptr->ward_no<<endl;
}
ptr=ptr->next;
}
while(ptr!=head);
}
}
void update()
{int r, w,i;
cout<<"ENTER THE ID WHOM YOU WANT TO UPDATE THE RECORD"<<endl;
cin>>i;
patient_node *ptr;
ptr=head;
if(!emptyList())
{do
{
if(ptr->id==i)
{cout<<"ENTER THE NEW ROOM NUMBER"<<endl;
cin>>r;
ptr->room_no= r;
cout<<"ENTER THE NEW WARD NUMBER"<<endl;
cin>>w;
ptr->ward_no= w;
ptr->id=ptr->id;
strcpy(ptr->name,ptr->name);
ptr->age=ptr->age;
strcpy(ptr->gender,ptr->gender);;
strcpy(ptr->phone_no,ptr->phone_no);
strcpy(ptr->disease,ptr->disease);;
strcpy(ptr->address,ptr->address);
strcpy(ptr->medicine,ptr->medicine);
}
ptr=ptr->next;
}while(ptr!=head);
}}
};
class Room
{
private:
struct room_node
{int roomno;
int no_of_beds;
bool ac;
int occupied_bed;
room_node *next;
room_node *prev;
};
struct room_node *head,*tail;
public:
Room()
{head=NULL;
tail=NULL;
}
bool empty()
{if(head==NULL)
{return true; 
}
else
	return false;
}

void insert_end_room(int rn, int nob,bool AC, int ob)
{
room_node *temp1;
temp1=new room_node;
temp1->roomno=rn;
temp1->no_of_beds=nob;
temp1->ac=AC;
temp1->occupied_bed=ob;
room_node *ptr;
ptr=head;
if(empty())
{tail=head=temp1;
}
else
{
tail->next=temp1;
temp1->prev=tail;
tail=temp1;
temp1->next=head;
head->prev=temp1;
}
}
void traverse_room()
{room_node *pointer;
pointer=head;
if(!empty())
{
cout<<"INFORMATION ABOUT THE ROOOM IS "<<endl;
do
{
cout<<"ROOM NUMBER: "<<pointer->roomno<<endl;
cout<<"NUMBER OF BEDS: "<<pointer->no_of_beds<<endl;
cout<<"AC: "<<pointer->ac<<endl;
cout<<"OCCUPIED BED: "<<pointer->occupied_bed<<endl;
cout<<endl;
pointer=pointer->next;
}
while(pointer!=head);
}}
void searchRoom()
{int r;
cout<<"ENTER THE ROOM NUMBER WHOM YOU WANT TO SEARCH"<<endl;
cin>>r;
room_node *pointer;
pointer=head;
if(!empty())
{do
{
if(pointer->roomno==r)
{cout<<"ROOM NUMBER: "<<pointer->roomno<<endl;
cout<<"NUMBER OF BEDS: "<<pointer->no_of_beds<<endl;
cout<<"AC: "<<pointer->ac<<endl;
cout<<"OCCUPIED BED: "<<pointer->occupied_bed<<endl;
cout<<endl;
}
pointer=pointer->next;
}
while(pointer!=head);

}
}
};
class Ward
{private:
struct ward_node
{int ward_no;
int no_of_beds;
bool ac;
int occupied_bed;
ward_node *next;
ward_node *prev;
};
struct ward_node *head,*tail;
public:
	Ward()
{head=NULL;
tail=NULL;
}
bool empty()
{if(head==NULL)
{return true; 
}
else
	return false;
}
void insert_end_room(int wn, int nob,bool AC, int ob)
{
ward_node *temp1;
temp1=new ward_node;
temp1->ward_no=wn;
temp1->no_of_beds=nob;
temp1->ac=AC;
temp1->occupied_bed=ob;
ward_node *ptr;
ptr=head;
if(empty())
{tail=head=temp1;
}
else
{
tail->next=temp1;
temp1->prev=tail;
tail=temp1;
temp1->next=head;
head->prev=temp1;
}
}
void traverse_ward()
{ward_node *pointer;
pointer=head;
if(!empty())
{
cout<<"INFORMATION ABOUT THE WARD IS "<<endl;
do
{
cout<<"WARD NUMBER: "<<pointer->ward_no<<endl;
cout<<"NUMBER OF BEDS: "<<pointer->no_of_beds<<endl;
cout<<"AC: "<<pointer->ac<<endl;
cout<<"OCCUPIED BED: "<<pointer->occupied_bed<<endl;
cout<<endl;
pointer=pointer->next;
}
while(pointer!=head);
}}
void searchWard()
{int w;
cout<<"ENTER THE WARD NUMBER WHOM YOU WANT TO SEARCH"<<endl;
cin>>w;
ward_node *pointer;
pointer=head;
if(!empty())
{do
{
if(pointer->ward_no==w)
{cout<<"WARD NUMBER: "<<pointer->ward_no<<endl;
cout<<"NUMBER OF BEDS: "<<pointer->no_of_beds<<endl;
cout<<"AC: "<<pointer->ac<<endl;
cout<<"OCCUPIED BED: "<<pointer->occupied_bed<<endl;
cout<<endl;
}
pointer=pointer->next;
}
while(pointer!=head);

}
}
};
int main()
{    
	Patient l;
		Room r;
		Ward w;
	char choice;
	char n;
	do
	{cout<<"*****************************************************"<<endl;
	cout<<"WELCOME TO HOSPITAL MANAGEMENT SYSTEM "<<endl;
	cout<<"PRESS 1 TO SEE THE LIST OF THE PATEINTS "<<endl;
	cout<<"PRESS 2 TO SEE THE LIST OF THE ROOMS "<<endl;
	cout<<"PRESS 3 TO SEE THE LIST OF THE WARDS "<<endl;
	cout<<"PRESS 4 TO DELETE THE INFORMATION ABOUT THE PATEINT"<<endl;
	cout<<"PRESS 5 TO INSERT THE INFORMATION OF THE PATIENT ANYWHERE YOU WANT"<<endl;
	cout<<"PRESS 6 TO SEARCH THE THE PATIENT "<<endl;
	cout<<"PRESS 7 TO SEARCH THE THE ROOM "<<endl;
	cout<<"PRESS 8 TO SEARCH THE THE WARD "<<endl;
	cout<<"PRESS 9 TO UPDATE THE THE RECORD "<<endl;
	cout<<"*****************************************************"<<endl;
	cin>>choice;
	if(choice=='1')
	{
	l.insert_end_pateint(1,"AQSA",18,"FEMALE","0345","MALARIA","RIZEK","RAWALPINDI",3,4);
	l.insert_end_pateint(2,"ANUM",17,"FEMALE","034005","CANCER","GLUCOPHAGE","ISLAMBAD",3,5);
	l.insert_end_pateint(3,"ALI",18,"MALE","0345","BLOOD PRESSURE","CO-EASY","RAWALPINDI",3,4);
	l.insert_end_pateint(4,"SADIA",17,"FEMALE","034005","BRAIN HAMERAGE","PANADOL","LAHORE",3,5);
	l.insert_end_pateint(5,"HIRA",18,"FEMALE","0345","MALARIA","RIZEK","RAWALPINDI",3,4);
	l.insert_end_pateint(7,"AMNA",17,"FEMALE","034005","HEART ATTACK","CALPOL","ISLAMBAD",3,5);
	l.traverse_pateint();
	}
	
	else if(choice=='2')
	{r.insert_end_room(1,4,true,2);
	r.insert_end_room(2,4,false,2);
	r.insert_end_room(3,4,true,2);
	r.insert_end_room(4,4,false,2);
	r.insert_end_room(5,4,false,2);
	r.traverse_room();
	}
	else if(choice=='3')
	{w.insert_end_room(1,3,true,2);
	w.insert_end_room(2,3,true,2);
	w.insert_end_room(3,3,false,1);
	w.insert_end_room(4,4,true,3);
	w.insert_end_room(5,5,false,1);
	w.traverse_ward();
	}
	else if(choice=='4')
	{l.delete_record();
	l.traverse_pateint();
	}
	else if(choice=='5')
	{l.insert();
	l.traverse_pateint();
	}
	else if(choice=='6')
	{l.search();
	}
	else if(choice=='7')
	{r.searchRoom();
	}
	else if(choice=='8')
	{w.searchWard();
	}
	else if(choice=='9')
	{l.update();
	l.traverse_pateint();
	}
	else
		cout<<"INCORRECT NUMBER"<<endl;
	cout<<"DO YOU WANT TO CONTINUE(Y/N)";
		cin>>n;

	}while(n=='Y' ||n=='y');
	
	system("pause");
	return 0;
}